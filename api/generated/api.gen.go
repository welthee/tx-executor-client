// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Defines values for AccountKind.
const (
	Kms AccountKind = "kms"
	Pk  AccountKind = "pk"
)

// AccountContext defines model for AccountContext.
type AccountContext struct {
	ExternalRef string `json:"externalRef"`
}

// AccountDetailedResponse defines model for AccountDetailedResponse.
type AccountDetailedResponse struct {
	Active  bool            `json:"active"`
	Address string          `json:"address"`
	Context *AccountContext `json:"context,omitempty"`
	Id      string          `json:"id"`
	Kind    AccountKind     `json:"kind"`
}

// AccountKind defines model for AccountKind.
type AccountKind string

// CreateAccountRequest defines model for CreateAccountRequest.
type CreateAccountRequest struct {
	Blockchain *string        `json:"blockchain,omitempty"`
	Context    AccountContext `json:"context"`
	Details    interface{}    `json:"details"`
	Kind       AccountKind    `json:"kind"`
}

// KmsAccountDetails defines model for KmsAccountDetails.
type KmsAccountDetails = map[string]interface{}

// ModelError defines model for ModelError.
type ModelError struct {
	Code    int32  `json:"code"`
	Key     string `json:"key"`
	Message string `json:"message"`
}

// PKAccountDetails defines model for PKAccountDetails.
type PKAccountDetails struct {
	Key string `json:"key"`
}

// CreateAccountJSONBody defines parameters for CreateAccount.
type CreateAccountJSONBody = CreateAccountRequest

// CreateAccountJSONRequestBody defines body for CreateAccount for application/json ContentType.
type CreateAccountJSONRequestBody = CreateAccountJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// CreateAccount request with any body
	CreateAccountWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateAccount(ctx context.Context, body CreateAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListAccount request
	ListAccount(ctx context.Context, externalRef string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DisableAccount request
	DisableAccount(ctx context.Context, externalRef string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OnCommand request
	OnCommand(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) CreateAccountWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAccountRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAccount(ctx context.Context, body CreateAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAccountRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListAccount(ctx context.Context, externalRef string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAccountRequest(c.Server, externalRef)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DisableAccount(ctx context.Context, externalRef string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDisableAccountRequest(c.Server, externalRef)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OnCommand(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOnCommandRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewCreateAccountRequest calls the generic CreateAccount builder with application/json body
func NewCreateAccountRequest(server string, body CreateAccountJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAccountRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateAccountRequestWithBody generates requests for CreateAccount with any type of body
func NewCreateAccountRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/account")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListAccountRequest generates requests for ListAccount
func NewListAccountRequest(server string, externalRef string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "externalRef", runtime.ParamLocationPath, externalRef)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/account/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDisableAccountRequest generates requests for DisableAccount
func NewDisableAccountRequest(server string, externalRef string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "externalRef", runtime.ParamLocationPath, externalRef)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/account/%s/disable", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOnCommandRequest generates requests for OnCommand
func NewOnCommandRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ws")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// CreateAccount request with any body
	CreateAccountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAccountResponse, error)

	CreateAccountWithResponse(ctx context.Context, body CreateAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAccountResponse, error)

	// ListAccount request
	ListAccountWithResponse(ctx context.Context, externalRef string, reqEditors ...RequestEditorFn) (*ListAccountResponse, error)

	// DisableAccount request
	DisableAccountWithResponse(ctx context.Context, externalRef string, reqEditors ...RequestEditorFn) (*DisableAccountResponse, error)

	// OnCommand request
	OnCommandWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*OnCommandResponse, error)
}

type CreateAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *AccountDetailedResponse
	JSONDefault  *ModelError
}

// Status returns HTTPResponse.Status
func (r CreateAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccountDetailedResponse
	JSONDefault  *ModelError
}

// Status returns HTTPResponse.Status
func (r ListAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DisableAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ModelError
}

// Status returns HTTPResponse.Status
func (r DisableAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DisableAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OnCommandResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r OnCommandResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OnCommandResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// CreateAccountWithBodyWithResponse request with arbitrary body returning *CreateAccountResponse
func (c *ClientWithResponses) CreateAccountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAccountResponse, error) {
	rsp, err := c.CreateAccountWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAccountResponse(rsp)
}

func (c *ClientWithResponses) CreateAccountWithResponse(ctx context.Context, body CreateAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAccountResponse, error) {
	rsp, err := c.CreateAccount(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAccountResponse(rsp)
}

// ListAccountWithResponse request returning *ListAccountResponse
func (c *ClientWithResponses) ListAccountWithResponse(ctx context.Context, externalRef string, reqEditors ...RequestEditorFn) (*ListAccountResponse, error) {
	rsp, err := c.ListAccount(ctx, externalRef, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAccountResponse(rsp)
}

// DisableAccountWithResponse request returning *DisableAccountResponse
func (c *ClientWithResponses) DisableAccountWithResponse(ctx context.Context, externalRef string, reqEditors ...RequestEditorFn) (*DisableAccountResponse, error) {
	rsp, err := c.DisableAccount(ctx, externalRef, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDisableAccountResponse(rsp)
}

// OnCommandWithResponse request returning *OnCommandResponse
func (c *ClientWithResponses) OnCommandWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*OnCommandResponse, error) {
	rsp, err := c.OnCommand(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOnCommandResponse(rsp)
}

// ParseCreateAccountResponse parses an HTTP response from a CreateAccountWithResponse call
func ParseCreateAccountResponse(rsp *http.Response) (*CreateAccountResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest AccountDetailedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ModelError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseListAccountResponse parses an HTTP response from a ListAccountWithResponse call
func ParseListAccountResponse(rsp *http.Response) (*ListAccountResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccountDetailedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ModelError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDisableAccountResponse parses an HTTP response from a DisableAccountWithResponse call
func ParseDisableAccountResponse(rsp *http.Response) (*DisableAccountResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DisableAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ModelError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseOnCommandResponse parses an HTTP response from a OnCommandWithResponse call
func ParseOnCommandResponse(rsp *http.Response) (*OnCommandResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OnCommandResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create executor account for the given tenant
	// (POST /account)
	CreateAccount(ctx echo.Context) error
	// Get account info
	// (GET /account/{externalRef})
	ListAccount(ctx echo.Context, externalRef string) error
	// Get account info
	// (PUT /account/{externalRef}/disable)
	DisableAccount(ctx echo.Context, externalRef string) error

	// (GET /ws)
	OnCommand(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CreateAccount converts echo context to params.
func (w *ServerInterfaceWrapper) CreateAccount(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateAccount(ctx)
	return err
}

// ListAccount converts echo context to params.
func (w *ServerInterfaceWrapper) ListAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "externalRef" -------------
	var externalRef string

	err = runtime.BindStyledParameterWithLocation("simple", false, "externalRef", runtime.ParamLocationPath, ctx.Param("externalRef"), &externalRef)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter externalRef: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListAccount(ctx, externalRef)
	return err
}

// DisableAccount converts echo context to params.
func (w *ServerInterfaceWrapper) DisableAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "externalRef" -------------
	var externalRef string

	err = runtime.BindStyledParameterWithLocation("simple", false, "externalRef", runtime.ParamLocationPath, ctx.Param("externalRef"), &externalRef)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter externalRef: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DisableAccount(ctx, externalRef)
	return err
}

// OnCommand converts echo context to params.
func (w *ServerInterfaceWrapper) OnCommand(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.OnCommand(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/account", wrapper.CreateAccount)
	router.GET(baseURL+"/account/:externalRef", wrapper.ListAccount)
	router.PUT(baseURL+"/account/:externalRef/disable", wrapper.DisableAccount)
	router.GET(baseURL+"/ws", wrapper.OnCommand)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xWTW/cNhD9K8K0R2G1SdoedGrqBEXgFjbcAD0EPnDJp11mRVIhR2sbhv57QUqy9kN2",
	"elggPtlazbx5M+9xqEeSzjTOwnKg8pGC3MCI9O97KV1r+cJZxj3HXxrvGnjWSO9xz/BW1Deo4iM/NKCS",
	"Antt19R1OXl8a7WHovLLQfBtPga71VdIpi4fi30AC11D3SA0zgacVhWS9Q57BVfO1RA2ggilPEKYYZOT",
	"nNr42UfG9FMxtV4MfRdHTXc5aTWLt9VW/U+wyxh6PBCtKD+YygA5dZGPvb4wr8uBBWxrImqzjTgm7OVM",
	"lC88BGPIvMG3FmFG1lXt5FZuhLbnnaNK0qYSzuKqovLLyxDXlwemCNTlLydcmnCccXsGpcaOnwQaO5nT",
	"5ZRD9KxSmrWzor7eG3Ul6oAZiL+dQv3Re+dPxZFOJe9XzhvBVJK2/O4tPaFoy1jDJ4PiYVZAgxDEGt8/",
	"sqlWjzNlzfV8ItQJ7XkuR/Vi0Cl8jNK2cn33loVM3oMRuqaSFHaLlZBbWPX7HWreAAvpTG+4IL1u4uCp",
	"pM8bHTIdMt4g+7cPzN5ff8o+32cf7yFbdj5TTrYGlkXKyanWEsMSssJEVlE/r8HCx6G0PlLYMDehLIq9",
	"8oVotHIyFCNClxPDm3BV/QO/0xJD3lEaCxm11FzHgD2alNMOPvStLBfLxZsI6RpY0Wgq6d1iuVhSTo3g",
	"TZp4IXpJkhauP+dRkdTaJ0Xl4TagXgoE/sOph3HW6PNF09Rapszia3B2uie+d6xmN07X9cr3Gz6xfbt8",
	"c7aaz90kqeqhJ4bQTCaaqjdNJdqaz8Zm7zDPEMDwIqfQGhNNNeqSYTTlIGRWOZ/Mu9Y72IxhheWUOkpd",
	"PO5dJ10ktsaM7n/pwJPqjfDCgOFD2seH9MbSI27mUcHDyrgX4v2Q/Eb5eDoOr7PpbLNvke8N7HgP3J7Y",
	"Yfkj7ZDWzavwwp/gJ/17Vs/qXSgdxKruv5jaGd0/9O9fvfS/xD/zwgwtqtcszl149uRd2QtnjEjfEHN+",
	"Pyx54ayFjA9Z26y9UFAZu+wOq+DkFv0ejYTgd6OG04VUFkXtpKg3LnD56/K3ZRE/hv4LAAD//7ojj+Tu",
	"CwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
